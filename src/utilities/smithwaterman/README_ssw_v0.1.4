SSW C Lib: A Genetic Striped Smith-Waterman Sequence Alignment Library Written in C

Author: Mengyao Zhao, Ph.D. student of Boston College
Contact: zhangmp@bc.edu
Last revision: 03/30/2012

1. Overview
SSW is a fast implementation of the Smith-Waterman algorithm, which uses the Single-Instruction Multiple-Data (SIMD) instructions 
to parallelize the algorithm at the instruction level. SSW C Lib provides an API that can be flexibly used by programs written in 
C, C++ and other languages. We also provide a software that can do protein and genome alignment directly. Current version of our 
implementation is ~50 times faster than an ordinary Smith-Waterman. It can return the Smith-Waterman score, alignment location and 
traceback path (cigar) of the optimal alignment accurately; and return the sub-optimal alignment score and location heuristically.

2. Install the software
1) Download the software.
2) cd src
3) make
4) the executable file will be ssw_test

3. Run the software
Usage: ssw_test [options] ... <target.fasta> <query.fasta>(or <query.fastq>)
Options:
	-m N	N is a positive integer for weight match in genome sequence alignment. [default: 2]
	-x N	N is a positive integer. -N will be used as weight mismatch in genome sequence alignment. [default: 2]
	-o N	N is a positive integer. -N will be used as the weight for the gap opening. [default: 3]
	-e N	N is a positive integer. -N will be used as the weight for the gap extension. [default: 1]
	-p	Do protein sequence alignment. Without this option, the ssw_test will do genome sequence alignment.
	-a FILE	FILE is either the Blosum or Pam weight matrix. [default: Blosum50]
	-c	Return the alignment in cigar format.
	-r	The best alignment will be picked between the original read alignment and the reverse complement read alignment.
	-s	Output in SAM format. [default: no header]
	-h	Include header in SAM output.

4. Software output
The software can output SAM format or BLAST like format results. 
1) An example of the SAM format output:
@HD	VN:1.4	SO:queryname
@SQ	SN:chr1	LN:1001
6:163296599:F:198;None;None/1	0	chr1	453	5	3M2D3M1D4M2D6M1D5M1D5M2I7M	*	0	0	CCAGCCCAAAATCTGTTTTAATGGTGGATTTGTGT	*	AS:i:37	NM:i:11
3:153409880:F:224;None;3,153410143,G,A/1	0	chr1	523	4	2M1D32M1D3M1D6M1D8M	*	0	0	GAAGAGTTAATTTAAGTCACTTCAAACAGATTACGTATCTTTTTTTTCCCT	*	AS:i:42	NM:i:16
Y:26750420:R:-132;None;None/1	0	chr1	120	4	2M1I4M3D3M1I7M2I9M2D6M1I8M	*	0	0	AACAACAGAAGTTAATTAGCTTCAAAAATACTTTATATTTGCAA	*	AS:i:32	NM:i:16
13:91170622:R:-276;None;None/1	0	chr1	302	4	8M1D8M1D3M2D6M1D4M2I2M1D2M3D5M1I4M	*	0	0	CATTTATTGTTGTTTTTAAAGATTAAATGATTAAATGTTTCAAAA	*	AS:i:32	NM:i:18
15:37079528:R:-240;None;None/1	0	chr1	4	5	4M2D4M1D9M1I3M4I16M1I3M1D4M2D5M	*	0	0	ACAGTGATGCCAAGCCAGTGGGTTTTAGCTTGTGGAGTTCCATAGGAGCGATGC	*	AS:i:30	NM:i:22
9:92308501:R:-176;None;None/1	0	chr1	142	4	4M3I5M4D10M2D4M1I2M2I6M5D1M1D6M2D3M	*	0	0	AATAACCATAAAAATGGGCAAAGCAGCCTTCAGGGCTGCTGTTTCTA	*	AS:i:26	NM:i:25
...
2) An example of the BLAST like output:
target_name: chr1
query_name: 6:163296599:F:198;None;None/1
optimal_alignment_score: 37	sub-optimal_alignment_score: 28	strand: +	target_begin: 453	target_end: 492	query_begin: 17	query_end: 51

Target:      453    CCAATGCCACAAAACATCTGTCTCTAACTGGTG--TGTGTGT    492
                    |||**|||*||||**||||||*|*|||*|||||**|*|||||
Query:        17    CCA--GCC-CAAA--ATCTGT-TTTAA-TGGTGGATTTGTGT    51

target_name: chr1
query_name: 3:153409880:F:224;None;3,153410143,G,A/1
optimal_alignment_score: 42	sub-optimal_alignment_score: 41	strand: +	target_begin: 523	target_end: 577	query_begin: 3	query_end: 53

Target:      523    GAGAGAGAAAATTTCACTCCCTCCATAAATCTCACAGTATTCTTTTCTTTTTCCT    577
                    ||*||||**|||||*|*||*||*||*|*|**|*||*|||*||||||*||||*|||
Query:         3    GA-AGAGTTAATTTAAGTCACTTCAAACAGATTAC-GTA-TCTTTT-TTTTCCCT    53
...

5. How to use the API
The API files include ssw.h and ssw.c, which can be directly used by any C and C++ programs. To use the API, please: 
1) Download ssw.h and ssw.c, and put them in the same folder of your own program files.
2) Write #include "ssw.h" into your file that will call the API functions.
3) The API files are ready to be compiled together with your own files.

The API function descriptions are in the file ssw.h. One example of the API usage is main.c.

6. Speed and memory usage




